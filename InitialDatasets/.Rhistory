strsplit(combi$Name[1], split='[,.]')[[1]]
View(test)
View(test)
View(train)
View(train)
test$Child[train$Age < 18] <- 1
test$Child[test$Age < 18] <- 1
combi <- rbind(train, test)
combi$Name <- as.character(combi$Name)
combi$Name[1]
#split name
strsplit(combi$Name[1], split='[,.]')
strsplit(combi$Name[1], split='[,.]')[[1]]
strsplit(combi$Name[1], split='[,.]')[[1]][2]
combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x,split='[,.]')[[1]][2]})
combi$Title <- sub(' ', '', combi$Title)
table(combi$Title)
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')]
<- 'Lady'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
combi$Title <- factor(combi$Title)
View(combi)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep="")
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
table(combi$FamilyID)
famIDs <- data.frame(table(combi$FamilyID))
View(famIDs)
View(famIDs)
famIDs <- famIDs[famIDs$Freq <= 2,]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
train <- combi[1:891,]
test <- combi[892:1309,]
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data=train, method="class")
plot(fit)
fancyRpartPlot(fit)
sample(1:10, replace = TRUE)
summary(combi$Age)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=combi[!is.na(combi$Age),], method="anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])
summary(combi)
summary(combi$Embarked)
combi$Embarked[c(62,830)] = "S"
combi$Embarked <- factor(combi$Embarked)
summary(combi$Embarked)
summary(combi$Fare)
combi$Fare[1044] <- median(combi$Fare, na.rm=TRUE)
iris
head(iris)
names(iris)
x = iris[,-5]
y = iris$Species
kc <- kmeans(x,3)
kc
library library(textir)
library(textir)
instal textir
plot(x[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
plot(x[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
library("arules")
library("arules");
install()
install
install.packages(arules)
install.packages("arules")
install.packages("arulesViz")
library("arules")
library("arulesViz")
patterns = random.patterns(nItems = 1000)
summarry(patterns)
summary(patterns)
trans = random.transactions(nItems = 1000, nTrans = 1000, method = "agrawal", patterns = patterns)
image(trans);
image(trans);
data("AdultUCI");
Adult = as(AdultUCI, "transactions")
Adult = as(AdultUCI, "transactions");
rules = apriori(Adult, parameter=list(support=0.01, confidence=0.5));
rules
rules = apriori(Adult, parameter=list(support=0.01, confidence=0.5));
data("AdultUCI")
Adult = as(AdultUCI, "transactions")
View(AdultUCI)
View(AdultUCI)
View(AdultUCI)
adult = as(AdultUCI, 'transactions')
rules = apriori(Adult, parameter=list(support=0.01, confidence=0.5))
Adult = as(AdultUCI, "transactions")
loc <- "http://archive.ics.uci.edu/ml/machine-learning-databases/"
ds <- "breast-cancer-wisconsin/breast-cancer-wisconsin.data"
url <- paste(loc, ds, sep="")
breast <- read.table(url, sep=",", header=FALSE, na.strings="?")
names(breast) <- c("ID", "clumpThickness", "sizeUniformity", "shapeUniformity", "maginalAdhesion", "singleEpithelialCellSize", "bareNuclei", "blandChromatin", "normalNucleoli", "mitosis", "class")
df <- breast[-1]
df$class <- factor(df$class, levels=c(2,4), labels=c("benign", "malignant")) set.seed(1234) train <- sample(nrow(df), 0.7*nrow(df)) df.train <- df[train,] df.validate <- df[-train,] table(df.train$class) table(df.validate$class)
df$class <- factor(df$class, levels=c(2,4), labels=c("benign", "malignant"))
se.seed(1234)
set.seed(1234)
train <- sample(nrow(df), 0.7*nrow(df))
df.train <- df[train,]
df.validate <- df[-train,]
table(df.train$class)
table(df.validate$class)
library(rpart)
set.seed(1234)
dtree <- rpart(class ~ ., data=df.train, method="class",parms = lis(split="information"))
dtree <- rpart(class ~ ., data=df.train, method="class",parms = list(split="information"))
dtree$cptable
plotcp(dtree)
dtree.pruned <- prune(dtree, cp=0.125)
dtree.pruned <- prune(dtree, cp=0.0125)
library(rpart.plot)
prp(dtree.pruned, type=2, extra=104, fallen.leaves = TRUE, main="Decision Tree")
prp(dtree.pruned, type=2, extra=104, fallen.leaves = TRUE, main="Decision Tree")
plotcp(dtree)
prp(dtree.pruned, type=2, extra=104, fallen.leaves = TRUE, main="Decision Tree")
library(rpart.plot)
dtree.pred <- predict(dtree.pruned, df.validate, type="class")
dtree.pref <- table(df.validate$class, dtree.pred, dnn=c("Actual", "Predicted"))
dtree.pref
library(party)
install.packages("party")
library(party)
fit.ctree <- ctree(class~., main="Conditional Interface Tree")
fit.ctree <- ctree(class~., data=df.train)
plot(fit.ctree, main="Conditional Inference Tree")
View(df)
ctree.pred <- predict(fit.ctree, df.validate, type="response")
ctree.pref <- table(df.validate$class, ctree.pred, dnn=c("Actual", "Predicted"))
ctree.pref
View(AdultUCI)
ctree.pref
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked, data=train,
method="class", control=rpart.control(minsplit=2, cp=0))
fancyRpartPlot(fit)
#import datasets
train <- read_csv("C:/Users/damie/Desktop/TitanicR/train.csv")
test <- read_csv("C:/Users/damie/Desktop/TitanicR/test.csv")
#put survived column into test dataset
test$Survived <- rep(0, 418)
#gets id and survived(yes(1)-no(0)) and writes to csv file
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "theyallperish.csv", row.names = FALSE)
#set survived = 1 if female
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
#if under 18 set child = 1
train$Child <- 0
train$Child[train$Age < 18] <- 1
#categorise fares
train$Fare2 <- '30+'
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- '20-30'
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- '10-20'
train$Fare2[train$Fare < 10] <- '<10'
#run new aggregate to see if fare and class played a role in who survived
aggregate(Survived ~ Fare2 + Pclass + Sex, data=train, FUN=function(x){sum(x)/length(x)})
#new prediction
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0
#Decision Tree
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
#view decision tree
plot(fit)
text(fit)
#use rpart to make prediction based on decision tree, create data frame with passId and Decision Tree prediction, write to csv
Prediction <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "myfirstdtree.csv", row.names = FALSE)
train <- read_csv("C:/Users/damie/Desktop/TitanicR/train.csv")
train <- read.csv("C:/Users/damie/Desktop/TitanicR/train.csv")
test <- read.csv("C:/Users/damie/Desktop/TitanicR/test.csv")
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "theyallperish.csv", row.names = FALSE)
test$Survived <- rep(0, 418)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "theyallperish.csv", row.names = FALSE)
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
train$Child <- 0
train$Child[train$Age < 18] <- 1
train$Fare2 <- '30+'
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- '20-30'
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- '10-20'
train$Fare2[train$Fare < 10] <- '<10'
aggregate(Survived ~ Fare2 + Pclass + Sex, data=train, FUN=function(x){sum(x)/length(x)})
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
library("rpart")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
plot(fix)
plot(fit)
text(fit)
Prediction <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "myfirstdtree.csv", row.names = FALSE)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class", control=rpart.control(minsplit=2, cp=0))
fancyRpartPlot(fit)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class", control=rpart.control(minsplit=2, cp=0))
fancyRpartPlot(fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked, data=train,
method="class", control=rpart.control( your controls ))
new.fit <- prp(fit,snip=TRUE)$obj
fancyRpartPlot(new.fit)
train$Name[1]
combi <- rbind(train, test)
test$Survived <- NA
combi <- rbind(train, test)
test$Fare2 <- '30+'
test$Fare2[test$Fare < 30 & test$Fare >= 20] <- '20-30'
test$Fare2[test$Fare < 20 & test$Fare >= 10] <- '10-20'
test$Fare2[test$Fare < 10] <- '<10'
combi <- rbind(train, test)
test$Child <- 0
test$Child[test$Age < 18] <- 1
combi <- rbind(train, test)
combi$Name <- as.character(combi$Name)
combi$Name[1]
strsplit(combi$Name[1], split='[,.]')
strsplit(combi$Name[1], split='[,.]')[[1]]
strsplit(combi$Name[1], split='[,.]')[[1]][2]
strsplit(combi$Name[1], split='[,.]')[[1]][3]
strsplit(combi$Name[1], split='[,.]')[[1]][2]
combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x,
split='[,.]')[[1]][2]})
combi$Title <- sub(' ', '', combi$Title)
table(combi$Title)
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')]
<- 'Lady'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
combi$Title <- factor(combi$Title)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x,
split='[,.]')[[1]][1]})
table(combi$Surname)
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname,
sep="")
table(combi$FamilyID)
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
View(combi)
table(combi$FamilyID)
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- data.frame(table(combi$FamilyID))
View(famIDs)
famIDs <- famIDs[famIDs$Freq <= 2,]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
train <- combi[1:891,]
test <- combi[892:1309,]
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID,
data=train, method="class")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare +
Embarked + Title + FamilySize + FamilyID,
data=train, method="class")
fancyRpartPlot(fit)
sample(1:10, replace = TRUE)
summary(combi$Age)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=combi[!is.na(combi$Age),], method="anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])
summary(combi)
summary(combi$Fare)
combi$Fare[1044] <- median(combi$Fare, na.rm=TRUE)
combi$FamilyID2 <- combi$FamilyID
combi$FamilyID2 <- as.character(combi$FamilyID2)
combi$FamilyID2[combi$FamilySize <= 3] <- 'Small'
combi$FamilyID2 <- factor(combi$FamilyID2)
install.packages('randomForest')
library(randomForest)
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp +
Parch + Fare + Embarked + Title + FamilySize +
FamilyID2, data=train, importance=TRUE, ntree=2000)
setwd("D:/yr4/Big_Data/Project/ipl/InitialDatasets")
#install.packages("readr")
#install.packages("sqldf")
library(sqldf)
library(readr)
#read all matches from csv
allMatches = read_csv("matches.csv")
#remove any matches that produced no result or were decided by DL, this will have impact on the performance of teams
completedMatches <- sqldf('SELECT * FROM allMatches where dl_applied == 0 AND result != "no result"')
#write completed matches to matches.csv in Analysis folder
write.csv(completedMatches,'../Analysis/matches.csv')
#update deliveries in Analysis folder to only include completed matches
deliveries <-read.csv("deliveries.csv")
deliveriesFromCompletedMatches <- sqldf('select * from deliveries where match_id in (select id from completedMatches)')
write.csv(deliveriesFromCompletedMatches,'../Analysis/deliveries.csv')
setwd("D:/yr4/Big_Data/Project/ipl/Analysis")
#install.packages("readr")
#install.packages("sqldf")
#install.packages("dplyr")
library(sqldf)
library(readr)
library(dplyr)
matches <- read.csv('matches.csv')
#  get each team that has played a game
df_teams<-(as.data.frame(unique(matches$team1)))
# column name = team
colnames(df_teams)[1]<-"team"
# total wins for each team
df_wins<-matches %>%
filter(result == "normal" | result == "tie") %>%
group_by(winner) %>%
summarise(total_win = n_distinct(id))
# merge two data-frames
df_teams<-merge(df_teams, df_wins, by.x = "team", by.y = "winner")
# get total number of matches for each team
df_total_matches<-combinedData %>%
filter(result=="normal" | result=="tie") %>%
group_by(batting_team) %>%
summarise(total_matches = n_distinct(match_id))
# combine data frames, no. wins, total matches
df_teams<-merge(df_teams, df_total_matches, by.x = "team", by.y = "batting_team")
# get win % based on total wins and total matches
df_teams<-df_teams %>%
mutate(winning_perc = (total_win/total_matches)*100)
# plot win data
df_teams %>%
ggplot(aes(x= reorder(team, -winning_perc), y= winning_perc))+
geom_bar(aes(fill = team), stat = "identity")+
labs(list(title = "Teams Performance", x = "Team", y = "Winning Percentage"))+
scale_fill_grey()+
theme(axis.text.x=element_text(angle=75, hjust=1), plot.title = element_text(size = 8, face = "bold"),text = element_text(size=8))
setwd("D:/yr4/Big_Data/Project/ipl/Analysis")
install.packages("readr")
install.packages("sqldf")
install.packages("dplyr")
library(sqldf)
library(readr)
library(dplyr)
matches <- read.csv('matches.csv')
#  get each team that has played a game
df_teams<-(as.data.frame(unique(matches$team1)))
# column name = team
colnames(df_teams)[1]<-"team"
# total wins for each team
df_wins<-matches %>%
filter(result == "normal" | result == "tie") %>%
group_by(winner) %>%
summarise(total_win = n_distinct(id))
# merge two data-frames
df_teams<-merge(df_teams, df_wins, by.x = "team", by.y = "winner")
# get total number of matches for each team
df_total_matches<-combinedData %>%
filter(result=="normal" | result=="tie") %>%
group_by(batting_team) %>%
summarise(total_matches = n_distinct(match_id))
# combine data frames, no. wins, total matches
df_teams<-merge(df_teams, df_total_matches, by.x = "team", by.y = "batting_team")
# get win % based on total wins and total matches
df_teams<-df_teams %>%
mutate(winning_perc = (total_win/total_matches)*100)
# plot win data
df_teams %>%
ggplot(aes(x= reorder(team, -winning_perc), y= winning_perc))+
geom_bar(aes(fill = team), stat = "identity")+
labs(list(title = "Teams Performance", x = "Team", y = "Winning Percentage"))+
scale_fill_grey()+
theme(axis.text.x=element_text(angle=75, hjust=1), plot.title = element_text(size = 8, face = "bold"),text = element_text(size=8))
install.packages("readr")
install.packages("gglpot2")
library(ggplot2)
setwd("D:/yr4/Big_Data/Project/ipl/Analysis")
#install.packages("readr")
#install.packages("sqldf")
#install.packages("dplyr")
library(sqldf)
library(readr)
library(dplyr)
matches <- read.csv('matches.csv')
#  get each team that has played a game
df_teams<-(as.data.frame(unique(matches$team1)))
# column name = team
colnames(df_teams)[1]<-"team"
# total wins for each team
df_wins<-matches %>%
filter(result == "normal" | result == "tie") %>%
group_by(winner) %>%
summarise(total_win = n_distinct(id))
# merge two data-frames
df_teams<-merge(df_teams, df_wins, by.x = "team", by.y = "winner")
# get total number of matches for each team
df_total_matches<-combinedData %>%
filter(result=="normal" | result=="tie") %>%
group_by(batting_team) %>%
summarise(total_matches = n_distinct(match_id))
# combine data frames, no. wins, total matches
df_teams<-merge(df_teams, df_total_matches, by.x = "team", by.y = "batting_team")
# get win % based on total wins and total matches
df_teams<-df_teams %>%
mutate(winning_perc = (total_win/total_matches)*100)
# plot win data
df_teams %>%
ggplot(aes(x= reorder(team, -winning_perc), y= winning_perc))+
geom_bar(aes(fill = team), stat = "identity")+
labs(list(title = "Teams Performance", x = "Team", y = "Winning Percentage"))+
scale_fill_grey()+
theme(axis.text.x=element_text(angle=75, hjust=1), plot.title = element_text(size = 8, face = "bold"),text = element_text(size=8))
matches <- read.csv('matches.csv')
df_teams<-(as.data.frame(unique(matches$team1)))
colnames(df_teams)[1]<-"team"
df_wins<-matches %>%
filter(result == "normal" | result == "tie") %>%
group_by(winner) %>%
summarise(total_win = n_distinct(id))
df_teams<-merge(df_teams, df_wins, by.x = "team", by.y = "winner")
View(df_teams)
df_teams<-merge(df_teams, df_wins, by.x = "team", by.y = "winner")
df_total_matches<-combinedData %>%
filter(result=="normal" | result=="tie") %>%
group_by(batting_team) %>%
summarise(total_matches = n_distinct(match_id))
df_total_matches<-dfteams %>%
filter(result=="normal" | result=="tie") %>%
group_by(batting_team) %>%
summarise(total_matches = n_distinct(match_id))
df_total_matches<-df_teams %>%
filter(result=="normal" | result=="tie") %>%
group_by(batting_team) %>%
summarise(total_matches = n_distinct(match_id))
df_total_matches<-matches %>%
filter(result=="normal" | result=="tie") %>%
group_by(batting_team) %>%
summarise(total_matches = n_distinct(match_id))
View(completedMatches)
View(matches)
total_matches_per_team <- sqldf('select team1 AS "team" from matches group by match_id')
total_matches_per_team <- sqldf('select team1 AS "team" from matches group by id')
View(total_matches_per_team)
total_matches_per_team <- sqldf('select team1 AS "team" from matches group by id AND team1')
total_matches_per_team <- sqldf('select DISTINCT team1 AS "team" from matches group by id')
total_matches_per_team <- sqldf('select DISTINCT team1 AS "team", count(team1) from matches group by id')
View(total_matches_per_team)
total_matches_per_team <- sqldf('select DISTINCT team1 AS "team", (SELECT Count(team1)) from matches group by id')
View(total_matches_per_team)
total_matches_per_team <- sqldf('select DISTINCT team1 AS "team", (SELECT Count(team1) from matches) from matches group by id')
View(total_matches_per_team)
total_matches_per_team <- sqldf('select DISTINCT team1 AS "team", (SELECT Count(team1) from matches group by id) from matches group by id')
View(total_matches_per_team)
df_total_matches<-deliveries %>%
filter(result=="normal" | result=="tie") %>%
group_by(batting_team) %>%
summarise(total_matches = n_distinct(match_id))
View(deliveries)
total_matches_per_team <- sqldf('select DISTINCT team1 AS "team", (SELECT Count(team1) from matches group by team1 AND id) from matches group by id')
View(total_matches_per_team)
sqldf('select team1 from matches group by team1')
sqldf('select team1, (select count(id) from matches group by teaam1) from matches group by team1')
sqldf('select team1, (select count(id) from matches group by team1) from matches group by team1')
sqldf('select team1, (select count(id) from matches group by team1) from matches group by team1 AND id')
sqldf('select team1, (select count(id) from matches group by team1) from matches group by team1 ')
View(allMatches)
deliveries <- read.csv('deliveries.csv')
matches <- read.csv('matches.csv')
sqldf('select count id from matches group by team1')
sqldf('select count(id) from matches group by team1')
sqldf('select team1 as "team" count(id) as "matches" from matches group by team1')
sqldf('select team1 as "team", count(id) as "matches" from matches group by team1')
total_matches_per_team <- sqldf('select team1 as "team", count(id) as "matches" from matches group by team1')
View(total_matches_per_team)
df_teams<-merge(df_teams, total_matches_per_team, by.x = "team", by.y = "team")
View(df_teams)
setwd("D:/yr4/Big_Data/Project/ipl/InitialDatasets")
#install.packages("readr")
#install.packages("sqldf")
library(sqldf)
library(readr)
#read all matches from csv
allMatches = read_csv("matches.csv")
#remove any matches that produced no result or were decided by DL, this will have impact on the performance of teams
completedMatches <- sqldf('SELECT * FROM allMatches where dl_applied == 0 AND result != "no result"')
#write completed matches to matches.csv in Analysis folder
write.csv(completedMatches,'../Analysis/matches.csv')
#update deliveries in Analysis folder to only include completed matches
deliveries <-read.csv("deliveries.csv")
deliveriesFromCompletedMatches <- sqldf('select * from deliveries where match_id in (select id from completedMatches)')
write.csv(deliveriesFromCompletedMatches,'../Analysis/deliveries.csv')
library(sqldf)
library(readr)
library(dplyr)
matches <- read.csv('matches.csv')
deliveries <- read.csv('deliveries.csv')
df_teams<-(as.data.frame(unique(matches$team1)))
View(df_teams)
colnames(df_teams)[1]<-"team"
df_wins<-matches %>%
filter(result == "normal" | result == "tie") %>%
group_by(winner) %>%
summarise(total_win = n_distinct(id))
View(df_wins)
df_teams<-merge(df_teams, df_wins, by.x = "team", by.y = "winner")
View(df_teams)
total_matches_per_team <- sqldf('select team1 as "team", count(id) as "matches" from matches group by team1')
View(total_matches_per_team)
