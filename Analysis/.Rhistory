batsman_stats_per_match <- merge(batsman_stats_per_match, sr, by.x = "batsman", by.y = "batsman")
Boundaries_Per_Batsman  <- group_by(deliveries, batsman) %>%
summarise(boundaries = sum(ifelse(batsman_runs==4 | batsman_runs==6, 1, 0)))%>%
arrange(desc(boundaries))
Boundaries_Per_Batsman_Per_Match <- sqldf('select batsman, (boundaries/total_matches) as "Boundaries_Per_Match" from Boundaries_Per_Batsman group by batsman')
batsman_stats_per_match <- merge(batsman_stats_per_match, Boundaries_Per_Batsman_Per_Match, by.x = "batsman", by.y = "batsman")
View(Boundaries_Per_Batsman)
View(batsman_stats_per_match)
setwd("D:/yr4/Big_Data/Project/ipl/Analysis")
#install.packages("ggrepel")
#install.packages("readr")
#install.packages("dplyr")
#install.packages("sqldf")
#install.packages("ggplot2")
library(sqldf)
library(ggplot2)
library(readr)
library(dplyr)
library(ggrepel)
deliveries <- read_csv('deliveries.csv');
#total matches per player
matches_per_player <- sqldf('select batsman,
count(DISTINCT(match_id)) as "total_matches"
from deliveries group by batsman')
# get runs, balls and strike rate for all batsmen
batsman <- sqldf('SELECT batsman, SUM(batsman_runs) AS "runs", Count(match_id) AS "balls"
FROM deliveries GROUP BY batsman')
batsman_overall_stats <- merge(batsman, matches_per_player, by.x = "batsman", by.y = "batsman")
batsman_stats_per_match <- sqldf('select batsman,
(runs/total_matches) as "Runs_Per_Match",
(balls/total_matches) as "Balls_Faced_Per_Match"
from batsman_overall_stats group by batsman')
sr = sqldf('select batsman, ((cast(Runs_Per_Match as float)/Balls_Faced_Per_Match )*100) as "strike_rate" from batsman_stats_per_match group by batsman')
batsman_stats_per_match <- merge(batsman_stats_per_match, sr, by.x = "batsman", by.y = "batsman")
Boundaries_Per_Batsman  <- group_by(deliveries, batsman) %>%
summarise(boundaries = sum(ifelse(batsman_runs==4 | batsman_runs==6, 1, 0)))%>%
arrange(desc(boundaries))
Boundaries_Per_Batsman <- merge(Boundaries_Per_Batsman,matches_per_player, by.x = "batsman", by,y = "batsman")
Boundaries_Per_Batsman_Per_Match <- sqldf('select batsman, (boundaries/total_matches) as "Boundaries_Per_Match" from Boundaries_Per_Batsman group by batsman')
batsman_stats_per_match <- merge(batsman_stats_per_match, Boundaries_Per_Batsman_Per_Match, by.x = "batsman", by.y = "batsman")
View(batsman_stats_per_match)
deliveries <- read_csv('deliveries.csv');
#total matches per player
matches_per_player <- sqldf('select batsman,
count(DISTINCT(match_id)) as "total_matches"
from deliveries group by batsman')
batsman <- sqldf('SELECT batsman, SUM(batsman_runs) AS "runs", Count(match_id) AS "balls"
FROM deliveries GROUP BY batsman')
batsman_overall_stats <- merge(batsman, matches_per_player, by.x = "batsman", by.y = "batsman")
View(batsman_overall_stats)
deliveries <- read_csv('deliveries.csv');
#total matches per player
matches_per_player <- sqldf('select batsman,
count(DISTINCT(match_id)) as "total_matches"
from deliveries group by batsman')
# get runs, balls and strike rate for all batsmen
batsman <- sqldf('SELECT batsman, SUM(batsman_runs) AS "runs", Count(match_id) AS "balls"
FROM deliveries GROUP BY batsman')
batsman_overall_stats <- merge(batsman, matches_per_player, by.x = "batsman", by.y = "batsman")
Boundaries_Per_Batsman  <- group_by(deliveries, batsman) %>%
summarise(boundaries = sum(ifelse(batsman_runs==4 | batsman_runs==6, 1, 0)))%>%
arrange(desc(boundaries))
batsman_overall_stats <- merge(batsman_overall_stats, Boundaries_Per_Batsman, by.x = "batsman", by.y = "batsman")
View(batsman_overall_stats)
batsman_stats_per_match <- sqldf('select batsman,
(runs/total_matches) as "Runs_Per_Match",
(balls/total_matches) as "Balls_Faced_Per_Match",
(boundaries/total_matches) as "Boundaries_Per_Match"
from batsman_overall_stats group by batsman')
View(batsman_stats_per_match)
sr = sqldf('select batsman, ((cast(Runs_Per_Match as float)/Balls_Faced_Per_Match )*100) as "strike_rate" from batsman_stats_per_match group by batsman')
batsman_stats_per_match <- merge(batsman_stats_per_match, sr, by.x = "batsman", by.y = "batsman")
View(batsman_stats_per_match)
deliveries <- read_csv('deliveries.csv');
#total matches per player
matches_per_player <- sqldf('select batsman,
count(DISTINCT(match_id)) as "total_matches"
from deliveries group by batsman')
# get runs, balls and strike rate for all batsmen
batsman <- sqldf('SELECT batsman, SUM(batsman_runs) AS "runs", Count(match_id) AS "balls"
FROM deliveries GROUP BY batsman')
batsman_overall_stats <- merge(batsman, matches_per_player, by.x = "batsman", by.y = "batsman")
Boundaries_Per_Batsman  <- group_by(deliveries, batsman) %>%
summarise(boundaries = sum(ifelse(batsman_runs==4 | batsman_runs==6, 1, 0)))%>%
arrange(desc(boundaries))
batsman_overall_stats <- merge(batsman_overall_stats, Boundaries_Per_Batsman, by.x = "batsman", by.y = "batsman")
batsman_stats_per_match <- sqldf('select batsman,
(runs/total_matches) as "Runs_Per_Match",
(balls/total_matches) as "Balls_Faced_Per_Match",
(boundaries/total_matches) as "Boundaries_Per_Match"
from batsman_overall_stats group by batsman')
sr = sqldf('select batsman, ((cast(Runs_Per_Match as float)/Balls_Faced_Per_Match )*100) as "strike_rate" from batsman_stats_per_match group by batsman')
batsman_stats_per_match <- merge(batsman_stats_per_match, sr, by.x = "batsman", by.y = "batsman")
png(filename="Images/Scatter_Plot_Boundaries_Vs_Balls_Faced.png")
plot(batsman_stats_per_match$Balls_Faced_Per_Match,
batsman_stats_per_match$Boundaries_Per_Match,
main = "Scatter Plot of Boundaries Scored vs Balls Faced",
xlab = "Average Balls Faced",
ylab = "Average Boundaries")
dev.off()
cor(batsman_stats_per_match$Balls_Faced_Per_Match, batsman_stats_per_match$Boundaries_Per_Match)
png(filename="Images/Scatter_Plot_Strike_Vs_Balls_Faced.png")
plot(batsman_stats_per_match$Balls_Faced_Per_Match,
batsman_stats_per_match$strike_rate,
main = "Scatter Plot of Strike Rate vs Balls Faced",
xlab = "Average Balls Faced",
ylab = "Average Strike Rate")
dev.off()
cor(batsman_stats_per_match$Balls_Faced_Per_Match, batsman_stats_per_match$strike_rate)
png(filename="Images/Scatter_Plot_Boundaries_Vs_Strike_Rate.png")
plot(batsman_stats_per_match$Boundaries_Per_Match,
batsman_stats_per_match$strike_rate,
main = "Scatter Plot of Boundaries vs Strike Rate",
xlab = "Average Boundaries",
ylab = "Average Strike Rate")
dev.off()
cor(batsman_stats_per_match$Balls_Faced_Per_Match, batsman_stats_per_match$Boundaries_Per_Match)
png(filename="Images/Scatter_Plot_Boundaries_Vs_Strike_Rate.png")
plot(batsman_stats_per_match$Boundaries_Per_Match,
batsman_stats_per_match$strike_rate,
main = "Scatter Plot of Strike Rate vs Boundaries",
xlab = "Average Boundaries",
ylab = "Average Strike Rate")
dev.off()
cor(batsman_stats_per_match$Balls_Faced_Per_Match, batsman_stats_per_match$Boundaries_Per_Match)
png(filename="Images/Scatter_Plot_Boundaries_Vs_Strike_Rate.png")
plot(batsman_stats_per_match$strike_rate,
batsman_stats_per_match$Boundaries_Per_Match,
main = "Scatter Plot of Strike Rate vs Boundaries",
xlab = "Average Boundaries",
ylab = "Average Strike Rate")
dev.off()
cor(batsman_stats_per_match$Balls_Faced_Per_Match, batsman_stats_per_match$Boundaries_Per_Match)
png(filename="Images/Scatter_Plot_Boundaries_Vs_Strike_Rate.png")
plot(batsman_stats_per_match$Boundaries_Per_Match,
batsman_stats_per_match$strike_rate,
main = "Scatter Plot of Strike Rate vs Boundaries",
xlab = "Average Boundaries",
ylab = "Average Strike Rate")
dev.off()
cor(batsman_stats_per_match$Balls_Faced_Per_Match, batsman_stats_per_match$Boundaries_Per_Match)
###############################################################################################
# COMMON SETUP
################################################################################################
setwd("D:/yr4/Big_Data/Project/ipl/Analysis")
#install.packages("readr")
#install.packages("sqldf")
#install.packages("dplyr")
library(sqldf)
library(readr)
library(dplyr)
library(ggplot2)
matches <- read.csv('matches.csv')
deliveries <- read.csv('deliveries.csv')
# get total matches where team is team1 and team is team2
total_team1_matches_per_team <- sqldf('select team1 as "team", count(id) as "matches" from matches group by team1')
total_team2_matches_per_team <- sqldf('select team2 as "team", count(id) as "matches" from matches group by team2')
# combine both sets above th get total numbuer of games per team
total_matches_per_team <- sqldf('
select team,sum(matches) total_matches
from
(
select team,matches
from total_team1_matches_per_team
union all
select team,matches
from total_team2_matches_per_team
) t
group by team')
################################################################################################
# EnD COMMON SETUP
################################################################################################
################################################################################################
# TEAM STATS - WINNING %
################################################################################################
#  get each team that has played a game
df_teams<-(as.data.frame(unique(matches$team1)))
# column name = team
colnames(df_teams)[1]<-"team"
# total wins for each team
df_wins<-matches %>%
filter(result == "normal" | result == "tie") %>%
group_by(winner) %>%
summarise(total_win = n_distinct(id))
# merge two data-frames
df_teams<-merge(df_teams, df_wins, by.x = "team", by.y = "winner")
# combine data frames, no. wins, total matches
df_teams<-merge(df_teams, total_matches_per_team, by.x = "team", by.y = "team")
# get win % based on total wins and total matches
df_teams<-df_teams %>%
mutate(winning_perc = (total_win/total_matches_per_team$total_matches)*100)
################################################################################################
# END TEAM STATS - WINNING %
################################################################################################
################################################################################################
# Team Batting Performance - Run Scored
################################################################################################
Runs_Scored_Per_Team <- sqldf('select sum(total_runs) AS "total_runs", batting_team from deliveries group by batting_team order by 1 DESC')
Runs_Scored_Per_Team <- merge(Runs_Scored_Per_Team, total_matches_per_team, by.x = "batting_team", by.y = "team")
Runs_Scored_Per_Match_Per_Team <- sqldf('select batting_team, (cast(total_runs as float)/total_matches) as "Runs_Per_Match" from Runs_Scored_Per_Team group by batting_team')
Runs_Scored_Per_Team <- merge(Runs_Scored_Per_Team, Runs_Scored_Per_Match_Per_Team, by.x = "batting_team", by.y = "batting_team")
################################################################################################
# End Team Batting Performance - Run Scored
################################################################################################
################################################################################################
# Team Bowling Performance - Runs Conceded
################################################################################################
Runs_Conceded_Per_Team <- sqldf('select sum(total_runs) AS "total_runs", bowling_team from deliveries group by bowling_team order by 1 DESC')
Runs_Conceded_Per_Team <- merge(Runs_Conceded_Per_Team, total_matches_per_team, by.x = "bowling_team", by.y = "team")
Runs_Conceded_Per_Match_Per_Team <- sqldf('select bowling_team, (cast(total_runs as float)/total_matches) as "Runs_Per_Match" from Runs_Conceded_Per_Team group by bowling_team')
Runs_Conceded_Per_Team <- merge(Runs_Conceded_Per_Team, Runs_Conceded_Per_Match_Per_Team, by.x = "bowling_team", by.y = "bowling_team")
################################################################################################
# End Team Bowling Performance - Runs Conceded
################################################################################################
################################################################################################
# Team Bowling Performance - Wickets Taken
################################################################################################
# get total number of wickets per team
wickets <- sqldf('select bowling_team, count(*) as "Total_Wickets_Taken" from deliveries where dismissal_kind != "" group by bowling_team')
wickets <- merge(wickets, total_matches_per_team, by.x = "bowling_team", by.y = "team")
#calculate wickets per match and add new column to wickets dataset
wickets_per_match <- sqldf('select bowling_team ,(cast(Total_Wickets_Taken as float)/total_matches) as "Wickets_Per_Match" from wickets group by bowling_team')
wickets <- merge(wickets, wickets_per_match, by.x = "bowling_team", by.y = "bowling_team")
################################################################################################
# End Team Bowling Performance - Wickets Taken
################################################################################################
################################################################################################
# Correlations
################################################################################################
# correlation between winning % and wickets taken per match
cor(df_teams$winning_perc,wickets$Wickets_Per_Match)
# correlation between winning % and runs scroed per match
cor(df_teams$winning_perc, Runs_Scored_Per_Team$Runs_Per_Match)
# correlation between winning % and run conceded per match
cor(df_teams$winning_perc, Runs_Conceded_Per_Team$Runs_Per_Match)
# correlation between runs scored and runs conceded
cor(Runs_Scored_Per_Team$Runs_Per_Match, Runs_Conceded_Per_Team$Runs_Per_Match)
# correlation between wickets conceded and runs conceded
cor(wickets$Wickets_Per_Match, Runs_Conceded_Per_Team$Runs_Per_Match)
# correlation between wickets conceded and scored conceded
cor(wickets$Wickets_Per_Match, Runs_Scored_Per_Team$Runs_Per_Match)
################################################################################################
# End Correlations
################################################################################################
View(Runs_Conceded_Per_Team)
plot(df_teams$winning_perc, Runs_Conceded_Per_Team$Runs_Per_Match)
plot(df_teams$winning_perc, Runs_Scored_Per_Team$Runs_Per_Match)
plot(df_teams$winning_perc, wickets$Wickets_Per_Match)
plot(Runs_Scored_Per_Team$Runs_Per_Match, Runs_Conceded_Per_Team$Runs_Per_Match)
plot(Runs_Scored_Per_Team$Runs_Per_Match, Runs_Conceded_Per_Team$Runs_Per_Match,
xlab = "Runs Scored Per Match")
plot(Runs_Scored_Per_Team$Runs_Per_Match, Runs_Conceded_Per_Team$Runs_Per_Match,
xlab = "Runs Scored Per Match", ylab = "Run Conceded Per Match")
plot(wickets$Wickets_Per_Match, Runs_Conceded_Per_Team$Runs_Per_Match)
# correlation between wickets conceded and runs conceded
cor(wickets$Wickets_Per_Match, Runs_Conceded_Per_Team$Runs_Per_Match)
cor(df_teams$winning_perc, Runs_Conceded_Per_Team$Runs_Per_Match)
plot(df_teams$winning_perc, Runs_Conceded_Per_Team$Runs_Per_Match)
plot(df_teams$winning_perc, Runs_Scored_Per_Team$Runs_Per_Match)
png(filename="Images/Scatter_Plot_Winning_Percentage_Vs_Runs_Scored.png")
plot(df_teams$winning_perc,
Runs_Scored_Per_Team$Runs_Per_Match,
xlab = "Winning Percentage",
ylab = "Avaerage Runs Scored")
dev.off()
png(filename="Images/Scatter_Plot_Winning_Percentage_Vs_Runs_Scored.png")
plot(df_teams$winning_perc,
Runs_Scored_Per_Team$Runs_Per_Match,
xlab = "Winning Percentage",
ylab = "Avaerage Runs Scored",
main = "Scatter Plor of Average Runs Scored Vs Winning %")
dev.off()
ggplot(Runs_Scored_Per_Team, aes(x= reorder(batting_team, Runs_Per_Match), y= Runs_Per_Match))+
geom_bar(fill = 'grey', stat = "identity")+
theme_classic()+
ggtitle('Average Runs Scored By Team Per Game')+
coord_flip()+
labs(x='Batting Team', y='Average Runs Scored')+
geom_text(aes(label = Runs_Per_Match, y = Runs_Per_Match),
size = 3,  position = position_dodge(0.9), vjust = 0)
View(Runs_Conceded_Per_Team)
View(Runs_Conceded_Per_Match_Per_Team)
png(filename="Images/Scatter_Plot_Winning_Percentage_Vs_Runs_Conceded.png")
plot(df_teams$winning_perc,
Runs_Conceded_Per_Team$Runs_Per_Match,
xlab = "Winning Percentage",
ylab = "Avaerage Runs Conceded",
main = "Scatter Plor of Average Runs Conceded Vs Winning %")
dev.off()
png(filename="Images/Scatter_Plot_Winning_Percentage_Vs_Wickets_Taken.png")
plot(df_teams$winning_perc,
wickets$Wickets_Per_Match,
xlab = "Winning Percentage",
ylab = "Avaerage Wickets Taken",
main = "Scatter Plor of Average Wickets Taken Vs Winning %")
dev.off()
cor(df_teams$winning_perc, wickets$Wickets_Per_Match)
###############################################################################################
# COMMON SETUP
################################################################################################
setwd("D:/yr4/Big_Data/Project/ipl/Analysis")
#install.packages("readr")
#install.packages("sqldf")
#install.packages("dplyr")
library(sqldf)
library(readr)
library(dplyr)
library(ggplot2)
matches <- read.csv('matches.csv')
deliveries <- read.csv('deliveries.csv')
# get total matches where team is team1 and team is team2
total_team1_matches_per_team <- sqldf('select team1 as "team", count(id) as "matches" from matches group by team1')
total_team2_matches_per_team <- sqldf('select team2 as "team", count(id) as "matches" from matches group by team2')
# combine both sets above th get total numbuer of games per team
total_matches_per_team <- sqldf('
select team,sum(matches) total_matches
from
(
select team,matches
from total_team1_matches_per_team
union all
select team,matches
from total_team2_matches_per_team
) t
group by team')
################################################################################################
# EnD COMMON SETUP
################################################################################################
################################################################################################
# TEAM STATS - WINNING %
################################################################################################
#  get each team that has played a game
df_teams<-(as.data.frame(unique(matches$team1)))
# column name = team
colnames(df_teams)[1]<-"team"
# total wins for each team
df_wins<-matches %>%
filter(result == "normal" | result == "tie") %>%
group_by(winner) %>%
summarise(total_win = n_distinct(id))
# merge two data-frames
df_teams<-merge(df_teams, df_wins, by.x = "team", by.y = "winner")
# combine data frames, no. wins, total matches
df_teams<-merge(df_teams, total_matches_per_team, by.x = "team", by.y = "team")
# get win % based on total wins and total matches
df_teams<-df_teams %>%
mutate(winning_perc = (total_win/total_matches_per_team$total_matches)*100)
################################################################################################
# END TEAM STATS - WINNING %
################################################################################################
################################################################################################
# Team Batting Performance - Run Scored
################################################################################################
Runs_Scored_Per_Team <- sqldf('select sum(total_runs) AS "total_runs", batting_team from deliveries group by batting_team order by 1 DESC')
Runs_Scored_Per_Team <- merge(Runs_Scored_Per_Team, total_matches_per_team, by.x = "batting_team", by.y = "team")
Runs_Scored_Per_Match_Per_Team <- sqldf('select batting_team, (cast(total_runs as float)/total_matches) as "Runs_Per_Match" from Runs_Scored_Per_Team group by batting_team')
Runs_Scored_Per_Team <- merge(Runs_Scored_Per_Team, Runs_Scored_Per_Match_Per_Team, by.x = "batting_team", by.y = "batting_team")
################################################################################################
# End Team Batting Performance - Run Scored
################################################################################################
################################################################################################
# Team Bowling Performance - Runs Conceded
################################################################################################
Runs_Conceded_Per_Team <- sqldf('select sum(total_runs) AS "total_runs", bowling_team from deliveries group by bowling_team order by 1 DESC')
Runs_Conceded_Per_Team <- merge(Runs_Conceded_Per_Team, total_matches_per_team, by.x = "bowling_team", by.y = "team")
Runs_Conceded_Per_Match_Per_Team <- sqldf('select bowling_team, (cast(total_runs as float)/total_matches) as "Runs_Per_Match" from Runs_Conceded_Per_Team group by bowling_team')
Runs_Conceded_Per_Team <- merge(Runs_Conceded_Per_Team, Runs_Conceded_Per_Match_Per_Team, by.x = "bowling_team", by.y = "bowling_team")
################################################################################################
# End Team Bowling Performance - Runs Conceded
################################################################################################
################################################################################################
# Team Bowling Performance - Wickets Taken
################################################################################################
# get total number of wickets per team
wickets <- sqldf('select bowling_team, count(*) as "Total_Wickets_Taken" from deliveries where dismissal_kind != "" group by bowling_team')
wickets <- merge(wickets, total_matches_per_team, by.x = "bowling_team", by.y = "team")
#calculate wickets per match and add new column to wickets dataset
wickets_per_match <- sqldf('select bowling_team ,(cast(Total_Wickets_Taken as float)/total_matches) as "Wickets_Per_Match" from wickets group by bowling_team')
wickets <- merge(wickets, wickets_per_match, by.x = "bowling_team", by.y = "bowling_team")
################################################################################################
# End Team Bowling Performance - Wickets Taken
################################################################################################
################################################################################################
# Correlations
################################################################################################
# correlation between winning % and wickets taken per match
cor(df_teams$winning_perc,wickets$Wickets_Per_Match)
plot(df_teams$winning_perc, wickets$Wickets_Per_Match)
################################################################################################
# correlation between winning % and runs scroed per match
cor(df_teams$winning_perc, Runs_Scored_Per_Team$Runs_Per_Match)
plot(df_teams$winning_perc, Runs_Scored_Per_Team$Runs_Per_Match)
################################################################################################
# correlation between winning % and run conceded per match
cor(df_teams$winning_perc, Runs_Conceded_Per_Team$Runs_Per_Match)
plot(df_teams$winning_perc, Runs_Conceded_Per_Team$Runs_Per_Match)
################################################################################################
# correlation between runs scored and runs conceded
cor(Runs_Scored_Per_Team$Runs_Per_Match, Runs_Conceded_Per_Team$Runs_Per_Match)
plot(Runs_Scored_Per_Team$Runs_Per_Match, Runs_Conceded_Per_Team$Runs_Per_Match,
xlab = "Runs Scored Per Match", ylab = "Run Conceded Per Match")
################################################################################################
# correlation between wickets conceded and runs conceded
cor(wickets$Wickets_Per_Match, Runs_Conceded_Per_Team$Runs_Per_Match)
plot(wickets$Wickets_Per_Match, Runs_Conceded_Per_Team$Runs_Per_Match)
################################################################################################
################################################################################################
# End Correlations
################################################################################################
png(filename="Images/Scatter_Plot_Dots_Balls_Vs_Deliveries.png")
plot(bowler_stats_Per_match$Deliveries_Per_Match,
bowler_stats_Per_match$Dots_Per_Match,
main = "Scatter Plot of No. of Dot Balls vs No. of Deliveries",
xlab = "Average No. Of Deliveries",
ylab = "Average Dot Balls")
dev.off()
setwd("D:/yr4/Big_Data/Project/ipl/Analysis")
#install.packages("ggrepel")
#install.packages("readr")
#install.packages("dplyr")
#install.packages("sqldf")
#install.packages("ggplot2")
library(sqldf)
library(ggplot2)
library(readr)
library(dplyr)
library(ggrepel)
deliveries <- read_csv('deliveries.csv')
# total_matches_per_player
matches_per_player <- sqldf('select bowler,
count(DISTINCT(match_id)) as "total_matches"
from deliveries group by bowler')
#dot balls, total balls, runs conceded
bowler_stats <- group_by(deliveries, bowler)%>%summarise(dot_balls = sum(ifelse(batsman_runs ==0 & extra_runs == 0 , 1, 0 )),
total_balls = sum(ifelse(wide_runs == 1 & noball_runs == 1, 0, 1 )),
total_runs = sum(batsman_runs+extra_runs))
# add number of games played per player
bowler_stats <- merge(bowler_stats, matches_per_player, by.x = "bowler", by.y = "bowler")
# total wickets per player
total_wickets_per_player <- group_by(deliveries, bowler)%>%
summarise(wickets = sum(ifelse(dismissal_kind
%in% c("caught", "bowled", "lbw", "caught and bowled"), 1,0)))
bowler_stats <- merge(bowler_stats,
total_wickets_per_player,
by.x = "bowler",
by.y = "bowler")
# bowler name to allow for creation of boxplots
bowler_overall_stats <- sqldf('select dot_balls as "Dots" ,
total_balls as "Deliveries",
total_runs as "Runs_Conceded",
wickets,
total_matches
from bowler_stats')
bowler_stats_Per_match <- sqldf('select (total_balls/total_matches) as "Deliveries_Per_Match",
(total_runs/total_matches) as "Runs_Conceded_Per_Match",
(dot_balls/total_matches) as "Dots_Per_Match",
(wickets/total_matches) as "Wickets_Per_Match" from bowler_stats')
########################################################################################################################
# boxplot of Deliveries per player per match
########################################################################################################################
png(filename="Images/Boxplot_Player_Deliveries_Per_Match.png")
boxplot(bowler_stats_Per_match$Deliveries_Per_Match,
main="Boxplot of Deliveries per player per match",
ylab="Number of Deliveries")
dev.off()
summary(bowler_stats_Per_match$Deliveries_Per_Match)
########################################################################################################################
# Scatter Plot of Run Conceeded Vs Number of Deliveries
########################################################################################################################
png(filename="Images/Scatter_Plot_Runs_Conceded_Vs_Deliveries.png")
plot(bowler_stats_Per_match$Deliveries_Per_Match,
bowler_stats_Per_match$Runs_Conceded_Per_Match,
main = "Scatter Plot	of Runs Conceded vs No. of Deliveries",
xlab = "Average No. Of Deliveries",
ylab = "Average Runs Conceded")
dev.off()
cor(bowler_stats_Per_match$Deliveries_Per_Match, bowler_stats_Per_match$Runs_Conceded_Per_Match)
#boxplot(bowler_stats_Per_match$Runs_Conceded_Per_Match,
#        main="Boxplot	of Runs Conceded per player per match",
#        ylab="Number of Runs Conceded")
#summary(bowler_stats_Per_match$Runs_Conceded_Per_Match)
########################################################################################################################
# Scatter Plot of Dot Balls Vs Number of Deliveries
########################################################################################################################
png(filename="Images/Scatter_Plot_Dots_Balls_Vs_Deliveries.png")
plot(bowler_stats_Per_match$Deliveries_Per_Match,
bowler_stats_Per_match$Dots_Per_Match,
main = "Scatter Plot of No. of Dot Balls vs No. of Deliveries",
xlab = "Average No. Of Deliveries",
ylab = "Average Dot Balls")
dev.off()
cor(bowler_stats_Per_match$Deliveries_Per_Match, bowler_stats_Per_match$Dots_Per_Match)
#boxplot(bowler_stats_Per_match$Dots_Per_Match,
#        main="Boxplot of Dot Balls per player per match",
#        ylab="Number of Dot Balls")
#
#summary(bowler_stats_Per_match$Dots_Per_Match)
########################################################################################################################
# Scatter Plot of Wicets Taken Vs Number of Deliveries
########################################################################################################################
png(filename="Images/Scatter_Plot_Wickets_Taken_Vs_Deliveries.png")
plot(bowler_stats_Per_match$Deliveries_Per_Match,
bowler_stats_Per_match$Wickets_Per_Match,
main = "Scatter Plot of Wickets Taken vs No. of Deliveries",
xlab = "Average No. Of Deliveries",
ylab = "Average Wickets Taken")
dev.off()
cor(bowler_stats_Per_match$Deliveries_Per_Match, bowler_stats_Per_match$Wickets_Per_Match)
#boxplot(bowler_stats_Per_match$Wickets_Per_Match,
#        main="Scatter Plot of Wickets Taken Vs No. of Deliveries",
#        ylab="Number of Wickets")
#summary(bowler_stats_Per_match$Wickets_Per_Match)
